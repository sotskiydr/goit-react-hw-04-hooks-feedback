{"version":3,"sources":["components/FeedbackOptions.js","components/Statictics.js","components/Notification.js","components/Section.js","App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","className","map","el","type","value","onClick","Statictics","good","neutral","bad","total","positivePercentage","Notification","message","Section","title","state","handleIncrement","btnNames","Object","keys","App","feedback","setState","prevState","Math","round","isNaN","this","countTotalFeedback","countPositiveFeedbackPercentage","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wSAyBeA,EAvBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,qBAAKC,UAAU,oBAAf,SACGF,EAAQG,KAAI,SAAAC,GAAE,OACb,wBAEEC,KAAK,SACLC,MAAOF,EACPG,QAAS,WACPN,EAAgBG,IALpB,SAQGA,GAPIA,SCiBAI,EAvBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,gCACE,4CACA,+BACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,YCAjBC,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KC6CEC,EA1CC,SAAC,GAMV,IALLC,EAKI,EALJA,MACAC,EAII,EAJJA,MACAN,EAGI,EAHJA,MACAC,EAEI,EAFJA,mBACAM,EACI,EADJA,gBAEQV,EAAuBS,EAAvBT,KAAMC,EAAiBQ,EAAjBR,QAASC,EAAQO,EAARP,IACjBS,EAAWC,OAAOC,KAAKJ,GAa7B,OACE,gCACE,6BAAKD,IACL,cAAC,EAAD,CAAiBhB,gBAAiBkB,EAAiBnB,QAASoB,IAC3DR,EAAQ,EAdT,cAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,IAYpB,cAAC,EAAD,CAAcE,QAAS,6BC9BzBQ,E,4MACJL,MAAQ,CACNT,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPQ,gBAAkB,SAAAK,GAChB,IAAMlB,EAAQkB,EACd,EAAKC,UAAS,SAAAC,GAAS,sBACpBpB,EAAQoB,EAAUpB,GAAS,O,wDAIhC,YACE,OADyC,EAAtBG,KAAsB,EAAhBC,QAAgB,EAAPC,M,6CAIpC,YAAyD,IAAvBF,EAAsB,EAAtBA,KAC1BG,EAAQH,EADwC,EAAhBC,QAAgB,EAAPC,IAEzCE,EAAqBc,KAAKC,MAAc,IAAPnB,EAAcG,GACrD,OAAOiB,MAAMhB,GAAsB,KAAUA,EAAqB,M,oBAGpE,WACE,OACE,cAAC,EAAD,CACEI,MAAM,wBACNE,gBAAiBW,KAAKX,gBACtBD,MAAOY,KAAKZ,MACZN,MAAOkB,KAAKC,mBAAmBD,KAAKZ,OACpCL,mBAAoBiB,KAAKE,gCAAgCF,KAAKZ,a,GA/BpDe,IAAMC,WAqCTX,ICpCfY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.0c88e827.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <div className=\"Counter__controls\">\n      {options.map(el => (\n        <button\n          key={el}\n          type=\"button\"\n          value={el}\n          onClick={() => {\n            onLeaveFeedback(el);\n          }}\n        >\n          {el}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array.isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\nconst Statictics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <div>\n      <h3>Statictics</h3>\n      <ul>\n        <li>Good: {good}</li>\n        <li>Neutral: {neutral}</li>\n        <li>Bad: {bad}</li>\n        <li>Total: {total}</li>\n        <li>Positive feedback: {positivePercentage}</li>\n      </ul>\n    </div>\n  );\n};\n\nStatictics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.string.isRequired,\n};\n\nexport default Statictics;\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React from 'react';\nimport FeedbackOptions from './FeedbackOptions';\nimport Statistics from './Statictics';\nimport Notification from './Notification';\nimport PropTypes from 'prop-types';\n\nconst Section = ({\n  title,\n  state,\n  total,\n  positivePercentage,\n  handleIncrement,\n}) => {\n  const { good, neutral, bad } = state;\n  const btnNames = Object.keys(state);\n  function renderStatistic() {\n    return (\n      <Statistics\n        good={good}\n        neutral={neutral}\n        bad={bad}\n        total={total}\n        positivePercentage={positivePercentage}\n      />\n    );\n  }\n\n  return (\n    <div>\n      <h2>{title}</h2>\n      <FeedbackOptions onLeaveFeedback={handleIncrement} options={btnNames} />\n      {total > 0 ? (\n        renderStatistic()\n      ) : (\n        <Notification message={'There is no feedback'} />\n      )}\n    </div>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  state: PropTypes.object.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.string.isRequired,\n  handleIncrement: PropTypes.func.isRequired,\n};\n\nexport default Section;\n","import './App.css';\nimport React from 'react';\nimport Section from './components/Section';\n\nclass App extends React.Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleIncrement = feedback => {\n    const value = feedback;\n    this.setState(prevState => ({\n      [value]: prevState[value] + 1,\n    }));\n  };\n\n  countTotalFeedback({ good, neutral, bad }) {\n    return good + neutral + bad;\n  }\n\n  countPositiveFeedbackPercentage({ good, neutral, bad }) {\n    const total = good + neutral + bad;\n    const positivePercentage = Math.round((good * 100) / total);\n    return isNaN(positivePercentage) ? 0 + '%' : positivePercentage + '%';\n  }\n\n  render() {\n    return (\n      <Section\n        title=\"Please leave feedback\"\n        handleIncrement={this.handleIncrement}\n        state={this.state}\n        total={this.countTotalFeedback(this.state)}\n        positivePercentage={this.countPositiveFeedbackPercentage(this.state)}\n      />\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}